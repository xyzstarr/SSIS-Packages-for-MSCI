#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Linq;
using System.Text.RegularExpressions;
#endregion

namespace ST_8cad3e58658d48429a967ecc1c51d0bf
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>



        public void Main()
        {
            try
            {
                // Get SSIS package variables
                string dbServer = Dts.Variables["User::DBServer"].Value.ToString();
                string dbName = Dts.Variables["User::DBName"].Value.ToString();
                string vendor = Dts.Variables["User::Vendor"].Value.ToString();
                string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
                string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
                string errorFolder = Dts.Variables["User::ErrorFolder"].Value.ToString();
                string tableName = Dts.Variables["User::TableName"].Value.ToString();
                string connectionString = $"Server={dbServer};Database={dbName};Integrated Security=True;";

                // Get list of files to process
                string[] filesToProcess = Directory.GetFiles(sourceFolder, "*.txt", SearchOption.TopDirectoryOnly);

                // Regex pattern to extract base table name without date suffix (case-insensitive for file extension)
                Regex baseNamePattern = new Regex(@"^([A-Za-z_]+)_\d{8}\.txt$", RegexOptions.IgnoreCase);

                foreach (string filePath in filesToProcess)
                {
                    string fileName = Path.GetFileName(filePath);
                    string baseTableName = ExtractBaseTableName(fileName, baseNamePattern);

                    if (baseTableName == null || !baseTableName.Equals(tableName, StringComparison.OrdinalIgnoreCase))
                    {
                        continue; // Skip this file if it's not for the expected table
                    }

                    try
                    {
                        // Load data from the file
                        DataTable fileData = LoadDataFromFile(filePath, vendor, tableName, connectionString);

                        if (fileData.Rows.Count == 0)
                        {
                            Dts.Events.FireInformation(0, "No Data Loaded", $"No rows were loaded from file: {filePath}", "", 0, ref fireAgain: false);
                            continue; // Skip to next file
                        }

                        // Insert data into the database
                        int rowsInserted = InsertDataIntoDatabase(fileData, vendor, tableName, connectionString);

                        if (rowsInserted == 0)
                        {
                            Dts.Events.FireError(0, "Insert Data Error", "No rows were inserted into the database.", "", 0);
                            continue; // Skip to next file
                        }

                        // Insert metadata and get the MetaDataID
                        int metaDataID = InsertMetaData(filePath, rowsInserted, vendor, dbName, tableName, connectionString);
                        if (metaDataID == 0)
                        {
                            Dts.Events.FireError(0, "MetaData Insert Error", "Failed to insert metadata or get valid MetaDataID.", "", 0);
                        }
                        else
                        {
                            // Update metadata record count after insertion
                            UpdateMetaDataRecordCount(metaDataID, rowsInserted, connectionString);
                        }

                        // Archive processed file
                        ArchiveProcessedFile(filePath, archiveFolder);
                    }
                    catch (Exception ex)
                    {
                        Dts.Events.FireError(0, "File Processing Error", ex.Message, "", 0);
                    }
                }

                Dts.TaskResult = (int)DTSExecResult.Success;
            }
            catch (Exception ex)
            {
                // Log failure and stop the task
                Dts.Events.FireError(0, "Script Task Error", ex.Message, "", 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }
        }

        private string ExtractBaseTableName(string fileName, Regex baseNamePattern)
        {
            Match match = baseNamePattern.Match(fileName);

            // If the regex match is successful, extract the base name
            if (match.Success)
            {
                return match.Groups[1].Value; // First capture group is the base table name
            }

            return null; // Return null if the file name doesn't match the pattern
        }

        private DataTable LoadDataFromFile(string filePath, string vendor, string tableName, string connectionString)
        {
            DataTable dataTable = CreateEmptyDataTable(vendor, tableName, connectionString);

            using (StreamReader reader = new StreamReader(filePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    string[] columns = line.Split('|');

                    if (columns.Length == dataTable.Columns.Count)
                    {
                        DataRow row = dataTable.NewRow();
                        for (int i = 0; i < columns.Length; i++)
                        {
                            row[i] = columns[i];
                        }
                        dataTable.Rows.Add(row);
                    }
                    else
                    {
                        Dts.Events.FireError(0, "Column Mismatch", "Number of columns in file does not match the table schema.", "", 0);
                    }
                }
            }

            // Log the number of rows loaded
            Dts.Events.FireInformation(0, "Rows Loaded", $"{dataTable.Rows.Count} rows loaded from file: {filePath}", "", 0, ref fireAgain: false);

            return dataTable;
        }

        private DataTable CreateEmptyDataTable(string vendor, string tableName, string connectionString)
        {
            DataTable dataTable = new DataTable();

            string query = $"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '{vendor}' AND TABLE_NAME = '{tableName}'";

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();

                using (SqlCommand cmd = new SqlCommand(query, conn))
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        dataTable.Columns.Add(reader["COLUMN_NAME"].ToString(), typeof(string));
                    }
                }
            }

            return dataTable;
        }

        private int InsertDataIntoDatabase(DataTable dataTable, string vendor, string tableName, string connectionString)
        {
            int rowsInserted = 0;
            string destinationTableName = $"{vendor}.{tableName}";

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn))
                {
                    bulkCopy.DestinationTableName = destinationTableName;

                    // Map columns by name instead of by index
                    foreach (DataColumn dataColumn in dataTable.Columns)
                    {
                        bulkCopy.ColumnMappings.Add(dataColumn.ColumnName, dataColumn.ColumnName);
                    }

                    bulkCopy.BatchSize = 10000;

                    try
                    {
                        bulkCopy.WriteToServer(dataTable);
                        rowsInserted = dataTable.Rows.Count;
                    }
                    catch (Exception ex)
                    {
                        Dts.Events.FireError(0, "Bulk Copy Error", ex.Message, "", 0);
                    }
                }
            }

            return rowsInserted;
        }

        private void ArchiveProcessedFile(string filePath, string archiveFolder)
        {
            string archivedFilePath = Path.Combine(archiveFolder, Path.GetFileName(filePath));
            File.Move(filePath, archivedFilePath);
        }

        // Insert metadata and return MetaDataID
        public int InsertMetaData(string filePath, int rowsInserted, string vendor, string dbName, string tableName, string connectionString)
        {
            int metaDataID = 0;
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    string ingestFileName = Path.GetFileName(filePath);
                    string ingestDBName = dbName;

                    using (SqlCommand cmd = new SqlCommand("dbo.spInsertMetaData", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.AddWithValue("@Vendor", vendor);
                        cmd.Parameters.AddWithValue("@IngestFileName", ingestFileName);
                        cmd.Parameters.AddWithValue("@IngestDBName", ingestDBName);
                        cmd.Parameters.AddWithValue("@OutputFileName", DBNull.Value);
                        cmd.Parameters.AddWithValue("@TableName", tableName);
                        cmd.Parameters.AddWithValue("@recordcount", rowsInserted);

                        object result = cmd.ExecuteScalar();
                        if (result != null)
                        {
                            metaDataID = Convert.ToInt32(result);
                        }
                        else
                        {
                            Dts.Events.FireError(0, "MetaData Insert Error", "Stored procedure did not return a valid MetaDataID.", "", 0);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "MetaData Insert Exception", ex.Message, "", 0);
            }

            return metaDataID;
        }

        // Update record count in MetaData table
        public void UpdateMetaDataRecordCount(int metaDataID, int recordCount, string connectionString)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    using (SqlCommand cmd = new SqlCommand("dbo.spUpdateMetadataRecordCount", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.AddWithValue("@MetaDataID", metaDataID);
                        cmd.Parameters.AddWithValue("@RecordCount", recordCount);

                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "MetaData Update Error", ex.Message, "", 0);
            }
        }





        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}

    




}
