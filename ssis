public void Main()

{

    try

    {

        // Get the SSIS package variables

        string dbServer = Dts.Variables["User::DBServer"].Value.ToString();

        string dbName = Dts.Variables["User::DBName"].Value.ToString();

        string vendor = Dts.Variables["User::Vendor"].Value.ToString();

        string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();

        string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();

        string errorFolder = Dts.Variables["User::ErrorFolder"].Value.ToString();

        string tableName = Dts.Variables["User::TableName"].Value.ToString();

        string connectionString = $"Server={dbServer};Database={dbName};Integrated Security=True;";

        // Get list of files to process

        string[] filesToProcess = Directory.GetFiles(sourceFolder, $"{tableName}_*.txt");

        foreach (string filePath in filesToProcess)

        {

            try

            {

                // Load data from the file

                DataTable fileData = LoadDataFromFile(filePath, vendor, tableName, connectionString);

                // Insert data into the database

                int rowsInserted = InsertDataIntoDatabase(fileData, vendor, tableName, connectionString);

                // Insert metadata and update record count in the MetaData table

                int metaDataID = InsertMetaData(filePath, rowsInserted, vendor, dbName, tableName, connectionString);

                UpdateMetaDataRecordCount(metaDataID, rowsInserted, connectionString);

                // Archive processed file

                ArchiveProcessedFile(filePath, archiveFolder);

            }

            catch (Exception ex)

            {

                Dts.Events.FireError(0, "File Processing Error", ex.Message, "", 0);

            }

        }

        Dts.TaskResult = (int)DTSExecResult.Success;

    }

    catch (Exception ex)

    {

        // Log failure and stop the task

        Dts.Events.FireError(0, "Script Task Error", ex.Message, "", 0);

        Dts.TaskResult = (int)DTSExecResult.Failure;

    }

}

private DataTable LoadDataFromFile(string filePath, string vendor, string tableName, string connectionString)

{

    DataTable dataTable = CreateEmptyDataTable(vendor, tableName, connectionString);

    foreach (var line in File.ReadLines(filePath))

    {

        string[] columns = line.Split('|');

        if (columns.Length == dataTable.Columns.Count)

        {

            dataTable.Rows.Add(columns);

        }

    }

    return dataTable;

}

private DataTable CreateEmptyDataTable(string vendor, string tableName, string connectionString)

{

    DataTable dataTable = new DataTable();

    string query = $"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '{vendor}' AND TABLE_NAME = '{tableName}'";

    using (SqlConnection conn = new SqlConnection(connectionString))

    {

        conn.Open();

        using (SqlCommand cmd = new SqlCommand(query, conn))

        using (SqlDataReader reader = cmd.ExecuteReader())

        {

            while (reader.Read())

            {

                dataTable.Columns.Add(reader["COLUMN_NAME"].ToString(), typeof(string));

            }

        }

    }

    return dataTable;

}

private int InsertDataIntoDatabase(DataTable dataTable, string vendor, string tableName, string connectionString)

{

    int rowsInserted = 0;

    string destinationTableName = $"{vendor}.{tableName}";

    using (SqlConnection conn = new SqlConnection(connectionString))

    {

        conn.Open();

        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn))

        {

            bulkCopy.DestinationTableName = destinationTableName;

            bulkCopy.WriteToServer(dataTable);

            rowsInserted = dataTable.Rows.Count;

        }

    }

    return rowsInserted;

}

private void ArchiveProcessedFile(string filePath, string archiveFolder)

{

    string archivedFilePath = Path.Combine(archiveFolder, Path.GetFileName(filePath));

    File.Move(filePath, archivedFilePath);

}

// Insert metadata and return MetaDataID

public int InsertMetaData(string filePath, int rowsInserted, string vendor, string dbName, string tableName, string connectionString)

{

    using (SqlConnection conn = new SqlConnection(connectionString))

    {

        conn.Open();

        string ingestFileName = Path.GetFileName(filePath);

        string ingestDBName = dbName;

        using (SqlCommand cmd = new SqlCommand("dbo.spInsertMetaData", conn))

        {

            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@Vendor", vendor);

            cmd.Parameters.AddWithValue("@IngestFileName", ingestFileName);

            cmd.Parameters.AddWithValue("@IngestDBName", ingestDBName);

            cmd.Parameters.AddWithValue("@OutputFileName", DBNull.Value); // Unused

            cmd.Parameters.AddWithValue("@TableName", tableName);

            cmd.Parameters.AddWithValue("@recordcount", rowsInserted);

            object result = cmd.ExecuteScalar();

            return result != null ? Convert.ToInt32(result) : 0;

        }

    }

}

// Update record count in MetaData table

public void UpdateMetaDataRecordCount(int metaDataID, int recordCount, string connectionString)

{

    using (SqlConnection conn = new SqlConnection(connectionString))

    {

        conn.Open();

        using (SqlCommand cmd = new SqlCommand("dbo.spUpdateMetadataRecordCount", conn))

        {

            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@MetaDataID", metaDataID);

            cmd.Parameters.AddWithValue("@RecordCount", recordCount);

            cmd.ExecuteNonQuery();

        }

    }

}





