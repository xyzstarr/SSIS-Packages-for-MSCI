public void Main()
{
    try
    {
        // Get the SSIS package variables
        string dbServer = Dts.Variables["User::DBServer"].Value.ToString();
        string dbName = Dts.Variables["User::DBName"].Value.ToString();
        string vendor = Dts.Variables["User::Vendor"].Value.ToString();
        string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
        string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
        string errorFolder = Dts.Variables["User::ErrorFolder"].Value.ToString();
        string connectionString = $"Server={dbServer};Database={dbName};Integrated Security=True;";

        // Get list of files to process that end with '_YYYYMMDD.txt'
        string[] filesToProcess = Directory.GetFiles(sourceFolder, "*_????????.txt");

        foreach (string filePath in filesToProcess)
        {
            try
            {
                string fileName = Path.GetFileName(filePath);
                
                // Extract the table name by removing the '_YYYYMMDD.txt' suffix
                int dateIndex = fileName.LastIndexOf('_');
                if (dateIndex > 0 && fileName.EndsWith(".txt"))
                {
                    string tableName = fileName.Substring(0, dateIndex);

                    // Create a DataTable and load it with data from the file
                    DataTable dataTable = new DataTable();
                    string query = $"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '{vendor}' AND TABLE_NAME = '{tableName}'";

                    using (SqlConnection conn = new SqlConnection(connectionString))
                    {
                        conn.Open();

                        // Retrieve column names from the database to create the DataTable
                        using (SqlCommand cmd = new SqlCommand(query, conn))
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                dataTable.Columns.Add(reader["COLUMN_NAME"].ToString(), typeof(string));
                            }
                        }

                        // Read the lines from the file and load them into the DataTable
                        foreach (var line in File.ReadLines(filePath))
                        {
                            string[] columns = line.Split('|');
                            if (columns.Length == dataTable.Columns.Count)
                            {
                                dataTable.Rows.Add(columns);
                            }
                        }

                        // Insert data into the database
                        int rowsInserted = 0;
                        string destinationTableName = $"{vendor}.{tableName}";

                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn))
                        {
                            bulkCopy.DestinationTableName = destinationTableName;
                            bulkCopy.WriteToServer(dataTable);
                            rowsInserted = dataTable.Rows.Count;
                        }

                        // Insert metadata and update record count in the MetaData table
                        string ingestFileName = Path.GetFileName(filePath);
                        string ingestDBName = dbName;
                        int metaDataID = 0;

                        using (SqlCommand cmd = new SqlCommand("dbo.spInsertMetaData", conn))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@Vendor", vendor);
                            cmd.Parameters.AddWithValue("@IngestFileName", ingestFileName);
                            cmd.Parameters.AddWithValue("@IngestDBName", ingestDBName);
                            cmd.Parameters.AddWithValue("@OutputFileName", DBNull.Value); // Unused
                            cmd.Parameters.AddWithValue("@TableName", tableName);
                            cmd.Parameters.AddWithValue("@recordcount", rowsInserted);

                            object result = cmd.ExecuteScalar();
                            metaDataID = result != null ? Convert.ToInt32(result) : 0;
                        }

                        // Update record count in MetaData table
                        using (SqlCommand cmd = new SqlCommand("dbo.spUpdateMetadataRecordCount", conn))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("@MetaDataID", metaDataID);
                            cmd.Parameters.AddWithValue("@RecordCount", rowsInserted);
                            cmd.ExecuteNonQuery();
                        }

                        // Archive processed file
                        string archivedFilePath = Path.Combine(archiveFolder, Path.GetFileName(filePath));
                        File.Move(filePath, archivedFilePath);
                    }
                }
                else
                {
                    throw new Exception($"Invalid file name format: {fileName}");
                }
            }
            catch (Exception ex)
            {
                // Log error if any issues occur while processing the file
                Dts.Events.FireError(0, "File Processing Error", ex.Message, "", 0);
            }
        }

        // Mark the task as successful
        Dts.TaskResult = (int)DTSExecResult.Success;
    }
    catch (Exception ex)
    {
        // Log any global errors and stop execution
        Dts.Events.FireError(0, "Script Task Error", ex.Message, "", 0);
        Dts.TaskResult = (int)DTSExecResult.Failure;
    }
}
