using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Dts.Runtime;

public class ScriptMain : UserComponent
{
    public void Main()
    {
        try
        {
            // Get SSIS package variables
            string dbServer = Dts.Variables["User::DBServer"].Value.ToString();
            string dbName = Dts.Variables["User::DBName"].Value.ToString();
            string vendor = Dts.Variables["User::Vendor"].Value.ToString();
            string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
            string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
            string errorFolder = Dts.Variables["User::ErrorFolder"].Value.ToString();
            string tableName = Dts.Variables["User::TableName"].Value.ToString();
            string connectionString = $"Server={dbServer};Database={dbName};Integrated Security=True;";

            // Get list of files to process
            string[] filesToProcess = Directory.GetFiles(sourceFolder, "*.txt", SearchOption.TopDirectoryOnly);

            // Regex pattern to extract base table name without date suffix (case-insensitive for file extension)
            Regex baseNamePattern = new Regex(@"^([A-Za-z_]+)_\d{8}\.txt$", RegexOptions.IgnoreCase);

            foreach (string filePath in filesToProcess)
            {
                string fileName = Path.GetFileName(filePath);
                string baseTableName = ExtractBaseTableName(fileName, baseNamePattern);

                if (baseTableName == null || !baseTableName.Equals(tableName, StringComparison.OrdinalIgnoreCase))
                {
                    continue; // Skip this file if it's not for the expected table
                }

                try
                {
                    // Load data from the file
                    DataTable fileData = LoadDataFromFile(filePath, vendor, tableName, connectionString);

                    if (fileData.Rows.Count == 0)
                    {
                        Dts.Events.FireInformation(0, "No Data Loaded", $"No rows were loaded from file: {filePath}", "", 0, ref fireAgain: false);
                        continue; // Skip to next file
                    }

                    // Insert data into the database
                    int rowsInserted = InsertDataIntoDatabase(fileData, vendor, tableName, connectionString);

                    if (rowsInserted == 0)
                    {
                        Dts.Events.FireError(0, "Insert Data Error", "No rows were inserted into the database.", "", 0);
                        continue; // Skip to next file
                    }

                    // Insert metadata and get the MetaDataID
                    int metaDataID = InsertMetaData(filePath, rowsInserted, vendor, dbName, tableName, connectionString);
                    if (metaDataID == 0)
                    {
                        Dts.Events.FireError(0, "MetaData Insert Error", "Failed to insert metadata or get valid MetaDataID.", "", 0);
                    }
                    else
                    {
                        // Update metadata record count after insertion
                        UpdateMetaDataRecordCount(metaDataID, rowsInserted, connectionString);
                    }

                    // Archive processed file
                    ArchiveProcessedFile(filePath, archiveFolder);
                }
                catch (Exception ex)
                {
                    Dts.Events.FireError(0, "File Processing Error", ex.Message, "", 0);
                }
            }

            Dts.TaskResult = (int)DTSExecResult.Success;
        }
        catch (Exception ex)
        {
            // Log failure and stop the task
            Dts.Events.FireError(0, "Script Task Error", ex.Message, "", 0);
            Dts.TaskResult = (int)DTSExecResult.Failure;
        }
    }

    private string ExtractBaseTableName(string fileName, Regex baseNamePattern)
    {
        Match match = baseNamePattern.Match(fileName);

        // If the regex match is successful, extract the base name
        if (match.Success)
        {
            return match.Groups[1].Value; // First capture group is the base table name
        }

        return null; // Return null if the file name doesn't match the pattern
    }

    private DataTable LoadDataFromFile(string filePath, string vendor, string tableName, string connectionString)
    {
        DataTable dataTable = CreateEmptyDataTable(vendor, tableName, connectionString);

        using (StreamReader reader = new StreamReader(filePath))
        {
            st
