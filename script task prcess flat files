using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Dts.Runtime;

public class ScriptMain : UserComponent
{
    public void Main()
    {
        try
        {
            // Get SSIS package variables
            string dbServer = Dts.Variables["User::DBServer"].Value.ToString();
            string dbName = Dts.Variables["User::DBName"].Value.ToString();
            string vendor = Dts.Variables["User::Vendor"].Value.ToString();
            string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
            string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
            string errorFolder = Dts.Variables["User::ErrorFolder"].Value.ToString();
            string tableName = Dts.Variables["User::TableName"].Value.ToString();
            string connectionString = $"Server={dbServer};Database={dbName};Integrated Security=True;";

            // Get list of files to process
            string[] filesToProcess = Directory.GetFiles(sourceFolder, "*.txt", SearchOption.TopDirectoryOnly);

            // Regex pattern to extract base table name without date suffix (case-insensitive for file extension)
            Regex baseNamePattern = new Regex(@"^([A-Za-z_]+)_\d{8}\.txt$", RegexOptions.IgnoreCase);

            foreach (string filePath in filesToProcess)
            {
                string fileName = Path.GetFileName(filePath);
                string baseTableName = ExtractBaseTableName(fileName, baseNamePattern);

                if (baseTableName == null || !baseTableName.Equals(tableName, StringComparison.OrdinalIgnoreCase))
                {
                    continue; // Skip this file if it's not for the expected table
                }

                try
                {
                    // Load data from the file
                    DataTable fileData = LoadDataFromFile(filePath, vendor, tableName, connectionString);

                    if (fileData.Rows.Count == 0)
                    {
                        Dts.Events.FireInformation(0, "No Data Loaded", $"No rows were loaded from file: {filePath}", "", 0, ref fireAgain: false);
                        continue; // Skip to next file
                    }

                    // Insert data into the database
                    int rowsInserted = InsertDataIntoDatabase(fileData, vendor, tableName, connectionString);

                    if (rowsInserted == 0)
                    {
                        Dts.Events.FireError(0, "Insert Data Error", "No rows were inserted into the database.", "", 0);
                        continue; // Skip to next file
                    }

                    // Insert metadata and get the MetaDataID
                    int metaDataID = InsertMetaData(filePath, rowsInserted, vendor, dbName, tableName, connectionString);
                    if (metaDataID == 0)
                    {
                        Dts.Events.FireError(0, "MetaData Insert Error", "Failed to insert metadata or get valid MetaDataID.", "", 0);
                    }
                    else
                    {
                        // Update metadata record count after insertion
                        UpdateMetaDataRecordCount(metaDataID, rowsInserted, connectionString);
                    }

                    // Archive processed file
                    ArchiveProcessedFile(filePath, archiveFolder);
                }
                catch (Exception ex)
                {
                    Dts.Events.FireError(0, "File Processing Error", ex.Message, "", 0);
                }
            }

            Dts.TaskResult = (int)DTSExecResult.Success;
        }
        catch (Exception ex)
        {
            // Log failure and stop the task
            Dts.Events.FireError(0, "Script Task Error", ex.Message, "", 0);
            Dts.TaskResult = (int)DTSExecResult.Failure;
        }
    }

    private string ExtractBaseTableName(string fileName, Regex baseNamePattern)
    {
        Match match = baseNamePattern.Match(fileName);

        // If the regex match is successful, extract the base name
        if (match.Success)
        {
            return match.Groups[1].Value; // First capture group is the base table name
        }

        return null; // Return null if the file name doesn't match the pattern
    }

    private DataTable LoadDataFromFile(string filePath, string vendor, string tableName, string connectionString)
    {
        DataTable dataTable = CreateEmptyDataTable(vendor, tableName, connectionString);

        using (StreamReader reader = new StreamReader(filePath))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                string[] columns = line.Split('|');

                if (columns.Length == dataTable.Columns.Count)
                {
                    DataRow row = dataTable.NewRow();
                    for (int i = 0; i < columns.Length; i++)
                    {
                        row[i] = columns[i];
                    }
                    dataTable.Rows.Add(row);
                }
                else
                {
                    Dts.Events.FireError(0, "Column Mismatch", "Number of columns in file does not match the table schema.", "", 0);
                }
            }
        }

        // Log the number of rows loaded
        Dts.Events.FireInformation(0, "Rows Loaded", $"{dataTable.Rows.Count} rows loaded from file: {filePath}", "", 0, ref fireAgain: false);

        return dataTable;
    }

    private DataTable CreateEmptyDataTable(string vendor, string tableName, string connectionString)
    {
        DataTable dataTable = new DataTable();

        string query = $"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '{vendor}' AND TABLE_NAME = '{tableName}'";

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();

            using (SqlCommand cmd = new SqlCommand(query, conn))
            using (SqlDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    dataTable.Columns.Add(reader["COLUMN_NAME"].ToString(), typeof(string));
                }
            }
        }

        return dataTable;
    }

    private int InsertDataIntoDatabase(DataTable dataTable, string vendor, string tableName, string connectionString)
    {
        int rowsInserted = 0;
        string destinationTableName = $"{vendor}.{tableName}";

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();

            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn))
            {
                bulkCopy.DestinationTableName = destinationTableName;

                // Map columns by name instead of by index
                foreach (DataColumn dataColumn in dataTable.Columns)
                {
                    bulkCopy.ColumnMappings.Add(dataColumn.ColumnName, dataColumn.ColumnName);
                }

                bulkCopy.BatchSize = 10000;

                try
                {
                    bulkCopy.WriteToServer(dataTable);
                    rowsInserted = dataTable.Rows.Count;
                }
                catch (Exception ex)
                {
                    Dts.Events.FireError(0, "Bulk Copy Error", ex.Message, "", 0);
                }
            }
        }

        return rowsInserted;
    }

    private void ArchiveProcessedFile(string filePath, string archiveFolder)
    {
        string archivedFilePath = Path.Combine(archiveFolder, Path.GetFileName(filePath));
        File.Move(filePath, archivedFilePath);
    }

    // Insert metadata and return MetaDataID
    public int InsertMetaData(string filePath, int rowsInserted, string vendor, string dbName, string tableName, string connectionString)
    {
        int metaDataID = 0;
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();

                string ingestFileName = Path.GetFileName(filePath);
                string ingestDBName = dbName;

                using (SqlCommand cmd = new SqlCommand("dbo.spInsertMetaData", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Vendor", vendor);
                    cmd.Parameters.AddWithValue("@IngestFileName", ingestFileName);
                    cmd.Parameters.AddWithValue("@IngestDBName", ingestDBName);
                    cmd.Parameters.AddWithValue("@OutputFileName", DBNull.Value);
                    cmd.Parameters.AddWithValue("@TableName", tableName);
                    cmd.Parameters.AddWithValue("@recordcount", rowsInserted);

                    object result = cmd.ExecuteScalar();
                    if (result != null)
                    {
                        metaDataID = Convert.ToInt32(result);
                    }
                    else
                    {
                        Dts.Events.FireError(0, "MetaData Insert Error", "Stored procedure did not return a valid MetaDataID.", "", 0);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Dts.Events.FireError(0, "MetaData Insert Exception", ex.Message, "", 0);
        }

        return metaDataID;
    }

    // Update record count in MetaData table
    public void UpdateMetaDataRecordCount(int metaDataID, int recordCount, string connectionString)
    {
        try
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();

                using (SqlCommand cmd = new SqlCommand("dbo.spUpdateMetadataRecordCount", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@MetaDataID", metaDataID);
                    cmd.Parameters.AddWithValue("@RecordCount", recordCount);

                    cmd.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            Dts.Events.FireError(0, "MetaData Update Error", ex.Message, "", 0);
        }
    }
}

